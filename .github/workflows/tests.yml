name: Tests

on:
  push:
    branches: [main, dev, "feature/*"]
  pull_request:
    branches: [main, dev]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          black --check --diff src tests

      - name: Import sort check with isort
        run: |
          isort --check-only --diff src tests

      - name: Type check with mypy
        run: |
          mypy src
        continue-on-error: true # Don't fail CI on type errors for now

      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run integration tests
        run: |
          pytest tests/ -m integration -v

      - name: Test CLI interface
        run: |
          python -m src.cli --help

      - name: Test example configuration
        run: |
          # Test that example config parses correctly
          python -c "
          import yaml
          from src.experiment.schemas import ExperimentConfig

          # Test basic config validation
          basic_config = {
              'data': {'dataset': 'mnist', 'batch_size': 32},
              'model': {'name': 'linear', 'input_size': 784, 'num_classes': 10},
              'training': {'epochs': 1, 'learning_rate': 0.01},
              'experiment': {'name': 'test', 'random_seed': 42}
          }

          try:
              cfg = ExperimentConfig(**basic_config)
              print('✓ Configuration validation passed')
          except Exception as e:
              print(f'✗ Configuration validation failed: {e}')
              raise
          "

  build-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Build documentation
        run: |
          # For now, just validate docstrings
          python -c "
          import inspect
          import src.experiment

          # Check that key modules have docstrings
          modules = ['schemas', 'data', 'models', 'pipeline']
          for module_name in modules:
              try:
                  module = getattr(src.experiment, module_name, None)
                  if module and hasattr(module, '__doc__') and module.__doc__:
                      print(f'✓ {module_name} has documentation')
                  else:
                      print(f'! {module_name} missing documentation')
              except:
                  print(f'! Could not check {module_name}')
          "
